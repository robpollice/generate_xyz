# import packages
import pathlib as pl
import argparse as ap
import rdkit.Chem as rdc
import rdkit.Chem.AllChem as rdca

# define utility functions
class structure:
    def __init__(self, smiles, name, file=''):
        self.name = name
        self.smiles = smiles
        self.file = file
        self.generate_coordinates()
        return
    
    def generate_coordinates_rdkit(self):
        """
        convert smiles to xyz coordinates using rdkit
        Authors: Pascal Friederich, Robert Pollice
        """
        try:
            self.mol = rdc.MolFromSmiles(self.smiles)
        except:
            print("ERROR: could not convert %s to rdkit molecule."%(self.smiles))
            exit()
        try:
            self.mol = rdc.AddHs(self.mol)
        except:
            print("ERROR: could not add hydrogen to rdkit molecule of %s."%(self.smiles))
            exit()
        try:
            rdca.EmbedMolecule(self.mol)
        except:
            print("ERROR: could not calculate 3D coordinates from rdkit molecule %s."%(self.smiles))
            exit()
        try:
            rdca.MMFFOptimizeMolecule(self.mol)
        except:
            print("ERROR: could not optimize 3D coordinates for rdkit molecule %s."%(self.smiles))
            exit()
        try:
            rdc.rdMolTransforms.CanonicalizeMol(self.mol, normalizeCovar=True, ignoreHs=False)
        except:
            print("ERROR: could not canonicalize 3D coordinates for rdkit molecule %s."%(self.smiles))
            exit()
        try:
            block=rdc.MolToMolBlock(self.mol)
            blocklines=block.split("\n")
            self.xyz=[]
            self.atoms=[]
            for line in blocklines[4:]:
                if len(line.split())==4:
                    break
                self.atoms.append(line.split()[3])
                self.xyz.append([float(line.split()[0]),float(line.split()[1]),float(line.split()[2])])
            self.atom_count = len(self.atoms)
        except:
            print("ERROR: could not read xyz coordinates from rdkit molecule %s."%(self.smiles))
            exit()
        return

    def generate_coordinates(self):
        # Generate XYZ from SMILES
        self.generate_coordinates_rdkit()
        self.write_xyz()
        return

    def write_xyz(self):
        cwd = pl.Path.cwd()
        text = str(self.atom_count)
        text += "\n"
        text += "Generated by generate_xyz.py\n"
        for line in range(self.atom_count):
            text += self.atoms[line]
            text += format(format(self.xyz[line][0], '.9f'), '>14s')
            text += format(format(self.xyz[line][1], '.9f'), '>14s')
            text += format(format(self.xyz[line][2], '.9f'), '>14s')
            text += "\n"
        self.file = self.name + '.xyz'
        with open(pl.Path(cwd / self.file), 'w') as f:
            f.write(text)
        return


if __name__ == "__main__":
    # parse command line input
    parser = ap.ArgumentParser()
    parser.add_argument("smiles", type=str, help="SMILES string of the molecule to be converted to an XYZ file.")
    parser.add_argument("--name", type=str, default="mol", help="File name of XYZ file to be generated.")
    args = parser.parse_args()
    
    # create XYZ file
    molecule = structure(args.smiles, args.name)